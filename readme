I like docker because it makes it very convenient for someone else to run your code.
Someone else does not need to go through depedency hell to get your code to work, they just need to get docker working and get the image.
To me docker provides a nice fixed environment where code will run.
(Insert ship computer meme)


a docker container is like a vm (google if you need to know the difference between container and image, and docker and virtual machine)
Docker requires less effort, not no effort. So we still need to put in some effort to learn how to have a nice "portable" environment.

Let's try to solve a real problem and get a container that can run superpoint. https://github.com/magicleap/SuperPointPretrainedNetwork



To give an analogy, container is like a virtual machine, and image is like the virtual machine disk. In very layman terms, image is like some harddisk in your computer, that has everything installed, container is like the computer that requires the hard disk so that it can launch the stuff you want to work with.

My analogy might suck, and if you still dont understand, I hope the example of building an image and getting a container to run helps you to understand better.
The by right way of building an image is to use a dockerfile. This dockerfile is the reciple/blueprint/instruction to build the docker image.
With an image, you then run a container based on that image. 

Assumption: we are using docker with a good enough gpu + nvidia driver (+ linux kernel > 3.10)
First install nvidia-docker2 following https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#setting-up-docker 


You can run the following command to build the image (the -t param is the tag/name you give your image)
docker build -f DOCKERFILE -t meme:1.0 .

Run the following to get get a shell (Like ssh into a computer with all the dependencies installed). -v mounts folder, can be used the mount the folder of code to run. The reason why you get a shell is because of -it (interactive). Without -it, your container will just run in the background. And when you exit from your container, it will be removed due to the --rm flag. 
docker run -it --rm --gpus=all --name=superpoint  -v /hdd/datasets/memes:/memes -e NVIDIA_DRIVER_CAPABILITIES=video,compute,utility  nvidia/cuda:10.2-cudnn7-devel-ubuntu16.04

I usually mount my code in the container (so container only contains environment, no source code) and run it in the container.

Another way to use the container is to get a command to run in the container. This command will be run in container, in the folder specified by WORKDIR in the DOCKERFILE used to create the image. This folder is where you are when you run with -it.

docker run --gpus=all --name=superpoint  -v /hdd/datasets/memes:/memes -v /hdd/memedef:/memedef -e NVIDIA_DRIVER_CAPABILITIES=video,compute,utility meme:1.0 black /memedef/show_points.py

black is a linter. It formats your code to look nice. Instead of formatting it this way, a more convenient way to do it is to set up your ide to format your code. Text editors like vim and sublime-text can be configured to use linters too.